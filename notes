1. login to docker via:
 aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin 778666285893.dkr.ecr.eu-west-2.amazonaws.com
e.g.

robert@CIC001419:~/src/typescript/spend-team$ aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin 778666285893.dkr.ecr.eu-west-2.amazonaws.com
WARNING! Your password will be stored unencrypted in /home/robert/.docker/config.json.
Configure a credential helper to remove this warning. See
https://docs.docker.com/engine/reference/commandline/login/#credentials-store

Login Succeeded
robert@CIC001419:~/src/typescript/spend-team$

You need to have up-to-date ENV variable from Playground!

2. Create an ECR (Elastic Container Registry) entry for spend-team-lambda. Only need to do the registration once.
 aws ecr create-repository --repository-name spend-team-lambda --region eu-west-2 --image-scanning-configuration scanOnPush=true --image-tag-mutability MUTABLE

e.g.

robert@CIC001419:~/src/typescript/spend-team$ aws ecr create-repository --repository-name spend-team-lambda --region eu-west-2 --image-scanning-configuration scanOnPush=true --image-tag-mutability MUTABLE
{
    "repository": {
        "repositoryArn": "arn:aws:ecr:eu-west-2:778666285893:repository/spend-team-lambda",
        "registryId": "778666285893",
        "repositoryName": "spend-team-lambda",
        "repositoryUri": "778666285893.dkr.ecr.eu-west-2.amazonaws.com/spend-team-lambda",
        "createdAt": 1721726890.674,
        "imageTagMutability": "MUTABLE",
        "imageScanningConfiguration": {
            "scanOnPush": true
        },
        "encryptionConfiguration": {
            "encryptionType": "AES256"
        }
    }
}

3. Build the docker image (tagged spend-team-lambda:latest).
 docker build --platform linux/amd64 -t spend-team-lambda:latest .
4. Tag the latest image we built in 3 with the ECR name.
 docker tag spend-team-lambda:latest 778666285893.dkr.ecr.eu-west-2.amazonaws.com
5. Then push the docker image
 docker push 778666285893.dkr.ecr.eu-west-2.amazonaws.com
6. List the images 
 aws ecr list-images --repository-name spend-team-lambda

e.g.

robert@CIC001419:~/src/typescript/spend-team$ aws ecr list-images --repository-name spend-team-lambda
{
    "imageIds": [
        {
            "imageDigest": "sha256:5d67648be489e571b8c2e2af50b34206c09d80b77f9a9bb829de262e51217e29",
            "imageTag": "latest"
        }
    ]
}

7. Update the function (pushing the image is not sufficient).
aws lambda update-function-code --function-name spend-team-lambda  --image-uri 778666285893.dkr.ecr.eu-west-2.amazonaws.com/spend-team-lambda:latest

8. Run the docker image server locally 
 docker run --platform linux/amd64 -p 9000:8080 spend-team-lambda:latest
9.  Use curl to throw data at the function.
 curl "http://localhost:9000/2015-03-31/functions/function/invocations" -d @al1.json


e.g. ALSO can invoke the lambda this way - not sure how to supply it data yet?

robert@CIC001419:~/src/typescript/spend-team$ aws lambda invoke --function-name spend-team-lambda new1.json
{
    "StatusCode": 200,
    "ExecutedVersion": "$LATEST"
}
robert@CIC001419:~/src/typescript/spend-team$ cat new1.json
{"statusCode":200,"body":"{\"message\":\"Hello World!\"}"}robert@CIC001419:~/src/typescript/spend-team$
robert@CIC001419:~/src/typescript/spend-team$

In the GUI when an elert is raised we see ... e.g. .....

Service          | Linked account ID | Linked account name | Region    | Usage type               | Cost Explorer link
AWS Security Hub | 778666285893      | RTNPlaygroundDevOps | eu-west-2 | EUW2-PaidComplianceCheck | View root cause

Run the docker container with environmental variables set.
docker run --env TEAM_SPEND_ALERT=10 --env TEAM_SPEND_ACTION=50 --platform linux/amd64 -p 9000:8080 spend-team-lambda:latest

for updating the lambda function to run with a particular environment.
aws lambda update-function-configuration --function-name spend-team-lambda --environment "Variables={TEAM_SPEND_ALERT=10, TEAM_SPEND_ACTION=50}"

# the above command destroys the Variables={} so if we need the current version, use this before running the above
aws lambda get-function-configuration â€” function-name my-function

and

robert@CIC001419:~/src/typescript/spend-team$ aws ce get-anomaly-subscriptions
{
    "AnomalySubscriptions": [
        {
            "SubscriptionArn": "arn:aws:ce::778666285893:anomalysubscription/584c6dc6-9992-4826-90fa-b223f068db3d",
            "AccountId": "778666285893",
            "MonitorArnList": [
                "arn:aws:ce::778666285893:anomalymonitor/c1dbe37d-8fe1-4654-9ff1-8d4a18f29c34"
            ],
            "Subscribers": [
                {
                    "Address": "arn:aws:sns:eu-west-2:778666285893:TeamSpendAlert",
                    "Type": "SNS",
                    "Status": "CONFIRMED"
                }
            ],
            "Frequency": "IMMEDIATE",
            "SubscriptionName": "TeamSpend",
            "ThresholdExpression": {
                "Dimensions": {
                    "Key": "ANOMALY_TOTAL_IMPACT_PERCENTAGE",
                    "Values": [
                        "0.1"
                    ],
                    "MatchOptions": [
                        "GREATER_THAN_OR_EQUAL"
                    ]
                }
            }
        }
    ]
}
robert@CIC001419:~/src/typescript/spend-team$ aws lambda get-function-configuration --function-name spend-team-lambda
{
    "FunctionName": "spend-team-lambda",
    "FunctionArn": "arn:aws:lambda:eu-west-2:778666285893:function:spend-team-lambda",
    "Role": "arn:aws:iam::778666285893:role/PlaygroundGenericRoleForServices",
    "CodeSize": 0,
    "Description": "",
    "Timeout": 3,
    "MemorySize": 128,
    "LastModified": "2024-07-25T15:00:30.000+0000",
    "CodeSha256": "a83479a3d179000d4c690c4e79d0bada53e4dbfdb3886ccefeec45a53fe1d367",
    "Version": "$LATEST",
    "Environment": {
        "Variables": {
            "TEAM_SPEND_ALERT": "5",
            "TEAM_SPEND_ACTION": "75"
        }
    },
    "TracingConfig": {
        "Mode": "PassThrough"
    },
    "RevisionId": "08bac5ec-b41e-4a66-8b4d-73622c5489ee",
    "State": "Active",
    "LastUpdateStatus": "Successful",
    "PackageType": "Image",
    "ImageConfigResponse": {},
    "Architectures": [
        "x86_64"
    ],
    "EphemeralStorage": {
        "Size": 512
    },
    "SnapStart": {
        "ApplyOn": "None",
        "OptimizationStatus": "Off"
    },
    "LoggingConfig": {
        "LogFormat": "Text",
        "LogGroup": "/aws/lambda/spend-team-lambda"
    }
}
robert@CIC001419:~/src/typescript/spend-team$
aws ce get-anomaly-subscriptions  > two.subscriptions.json
{
    "AnomalySubscriptions": [
        {
            "SubscriptionArn": "arn:aws:ce::778666285893:anomalysubscription/584c6dc6-9992-4826-90fa-b223f068db3d",
            "AccountId": "778666285893",
            "MonitorArnList": [
                "arn:aws:ce::778666285893:anomalymonitor/c1dbe37d-8fe1-4654-9ff1-8d4a18f29c34"
            ],
            "Subscribers": [
                {
                    "Address": "arn:aws:sns:eu-west-2:778666285893:TeamSpendAlert",
                    "Type": "SNS",
                    "Status": "CONFIRMED"
                }
            ],
            "Frequency": "IMMEDIATE",
            "SubscriptionName": "TeamSpend",
            "ThresholdExpression": {
                "Dimensions": {
                    "Key": "ANOMALY_TOTAL_IMPACT_PERCENTAGE",
                    "Values": [
                        "0.1"
                    ],
                    "MatchOptions": [
                        "GREATER_THAN_OR_EQUAL"
                    ]
                }
            }
        },
        {
            "SubscriptionArn": "arn:aws:ce::778666285893:anomalysubscription/f5dcb18b-101b-4b24-bb28-0eb1dd0eb5cd",
            "AccountId": "778666285893",
            "MonitorArnList": [
                "arn:aws:ce::778666285893:anomalymonitor/c1dbe37d-8fe1-4654-9ff1-8d4a18f29c34"
            ],
            "Subscribers": [
                {
                    "Address": "arn:aws:sns:eu-west-2:778666285893:TeamSpendAction",
                    "Type": "SNS",
                    "Status": "CONFIRMED"
                }
            ],
            "Threshold": 100.0,
            "Frequency": "IMMEDIATE",
            "SubscriptionName": "TeamSpendAction",
            "ThresholdExpression": {
                "Dimensions": {
                    "Key": "ANOMALY_TOTAL_IMPACT_ABSOLUTE",
                    "Values": [
                        "100"
                    ],
                    "MatchOptions": [
                        "GREATER_THAN_OR_EQUAL"
                    ]
                }
            }
        }
    ]
}
robert@CIC001419:~/src/typescript/spend-team$ aws ecr create-repository --repository-name team-spend-action
{
    "repository": {
        "repositoryArn": "arn:aws:ecr:eu-west-2:778666285893:repository/team-spend-action",
        "registryId": "778666285893",
        "repositoryName": "team-spend-action",
        "repositoryUri": "778666285893.dkr.ecr.eu-west-2.amazonaws.com/team-spend-action",
        "createdAt": 1722425330.275,
        "imageTagMutability": "MUTABLE",
        "imageScanningConfiguration": {
            "scanOnPush": false
        },
        "encryptionConfiguration": {
            "encryptionType": "AES256"
        }
    }
}
robert@CIC001419:~/src/typescript/spend-team$ aws ce get-anomalies --date-interval 'StartDate=2024-08-01,EndDate=2024-08-06'

#export TF_VAR_alert_email_address=alpha@beta.delta
#export TF_VAR_action_email_address=$TF_VAR_alert_email_address
export TF_VAR_awsID=778666285893
tofu plan -out tofu.plan && tofu show tofu.plan > plan.txt
tofu validate && tofu plan -out tofu.plan && tofu show tofu.plan > plan.txt
cat plan.txt | more
export TF_VAR_team_spend_emails='["a@b.c", "d@e.f"]'
